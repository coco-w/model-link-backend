generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 用户
model User {
  /// cuid() generates a unique ID
  id                  String                @id @default(cuid())
  // 用户名称1
  username            String                @unique() /// 用户名称
  /// 用户密码
  password            String // 用户密码
  realname            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GraphicItem         GraphicItem[]
  FormEntity          FormEntity[]
  ViewItem            ViewItem[]
  FrameworkManagement FrameworkManagement[]
}

/// 图元设计
model GraphicItem {
  id            String           @id @default(cuid())
  name          String
  structure     String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  config        String           @db.Text
  svgOneHundred String           @db.Text
  svgTwenty     String           @db.Text
  type          GraphicItem_type @default(vertex)
  userId        String
  value         String?          @db.Text
  user          User             @relation(fields: [userId], references: [id])
  viewItems     ViewItem[]
}

enum GraphicItem_type {
  vertex
  edge
}

/// 表单设计
model FormEntity {
  id        String     @id @default(cuid())
  name      String
  judgment  Boolean? /// 判断是否有开始时间和结束时间(true/false)
  remark    String?
  config    String?    @db.Text
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  viewItems ViewItem[]
}

/// 视图设计
model ViewItem {
  id           String        @id @default(cuid())
  name         String /// 视图名称
  type         ViewItem_type @default(graph) /// 视图类型
  remark       String? /// 备注
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  graphicItems GraphicItem[]
  formEntities FormEntity[]
}

enum ViewItem_type {
  /// 结构图
  graph
  /// 表单
  form
  /// 甘特图
  gantt
  /// 矩阵视图
  matrix
  /// 矩阵视图-输入框
  matrixInput
  /// 交互矩阵
  interactiveMatrix
  /// 度量图
  measurement
  /// 元模型表格
  sourceModelTable
  /// 元任务视图
  sourceTaskView
  /// 概念图
  conceptual
  /// 富文本编辑器
  richTextEditor
  /// 约束视图
  constraintView
}

model FrameworkManagement {
  id        String   @id @default(cuid())
  name      String
  remark    String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
